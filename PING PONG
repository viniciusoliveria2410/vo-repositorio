let leftPaddle;

let rightPaddle;

let ball;

function setup() {

  createCanvas(800, 400);

  leftPaddle = new Paddle(20, height / 2);

  rightPaddle = new Paddle(width - 20, height / 2);

  ball = new Ball(width / 2, height / 2);

}

function draw() {

  background(0);

  

  // Movimenta e desenha as raquetes

  leftPaddle.update();

  leftPaddle.show();

  rightPaddle.update();

  rightPaddle.show();

  

  // Movimenta e desenha a bola

  ball.update();

  ball.show();

  

  // Verifica e trata colisões com as raquetes

  ball.checkPaddleCollision(leftPaddle);

  ball.checkPaddleCollision(rightPaddle);

}

class Paddle {

  constructor(x, y) {

    this.x = x;

    this.y = y;

    this.w = 10;

    this.h = 80;

    this.speed = 5;

  }

  update() {

    if (keyIsDown(UP_ARROW)) {

      this.y -= this.speed;

    }

    if (keyIsDown(DOWN_ARROW)) {

      this.y += this.speed;

    }

    this.y = constrain(this.y, this.h / 2, height - this.h / 2);

  }

  show() {

    fill(255);

    rectMode(CENTER);

    rect(this.x, this.y, this.w, this.h);

  }

}

class Ball {

  constructor(x, y) {

    this.x = x;

    this.y = y;

    this.radius = 15;

    this.xSpeed = 5;

    this.ySpeed = 5;

  }

  update() {

    this.x += this.xSpeed;

    this.y += this.ySpeed;

    

    // Verifica e trata colisões com as paredes

    if (this.y - this.radius < 0 || this.y + this.radius > height) {

      this.ySpeed *= -1;

    }

    

    // Verifica e trata colisões com os limites laterais (pontos)

    if (this.x - this.radius < 0 || this.x + this.radius > width) {

      if (this.x - this.radius < 0) {

        // Ponto para a direita

      } else {

        // Ponto para a esquerda

      }

      this.reset();

    }

  }

  show() {

    fill(255);

    ellipse(this.x, this.y, this.radius * 2);

  }

  reset() {

    this.x = width / 2;

    this.y = height / 2;

  }

  checkPaddleCollision(paddle) {

    if (this.x - this.radius < paddle.x + paddle.w / 2 && 

        this.x + this.radius > paddle.x - paddle.w / 2 &&

        this.y + this.radius > paddle.y - paddle.h / 2 &&

        this.y - this.radius < paddle.y + paddle.h / 2) {

      this.xSpeed *= -1;

    }

  }

}

